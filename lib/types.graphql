type Article {
    id: ID!
    createdAt: String!
    userId: String
    name: String
    content: String
    user: User!
    comments: [Comment]!
}

type User {
    id: ID!
    createdAt: String!
    username: String!
    email: String!
    articles(userId: String): [Article!]!
    totalArticles: Count!
    comments: [Comment]!
}

type Comment {
    id: ID!
    createdAt: String!
    userId: String!
    articleId: String!
    comment: String!
    responses: [Response]!
    user: User
}

type Response {
    id: ID!
    createdAt: String!
    userId: String!
    articleId: String!
    commentId: String!
    response: String!,
    article: Article!
    user: User!
}

type Login {
    id: String!
    ttl: Int!
    created: String!
    userId: String!
    totalArticles: Count!
}

type Count {
    count: Int!
}

type Mutation {
    login (username: String! password: String!): Login

    # Articles
    createArticle (userId: String! name: String content: String): Article

    # Comments
    comment (userId: String! articleId: String! comment: String!): Comment

    respondToComment (userId: String! articleId: String! commentId: String! response: String!): Response
}

type Query {
    # User
    user(id: String): User!
    users: [User]!

    # Article
    article(id: String!): Article!
    articles: [Article]!
    myArticles(id: String!): [Article]!

    # Comment
}